[project]
name = "aromcp"
version = "0.1.0"
description = "A suite of MCP servers for AI-driven development workflows"
readme = "README.md"
requires-python = ">=3.12"
dependencies = [
    "fastmcp>=2.10.5",
    "chardet>=5.0.0",
    "pyyaml>=6.0.0",
    "pythonmonkey>=1.1.1",
    "psutil>=5.9.0",
]

keywords = [
    "mcp",
    "development-tools",
    "code-analysis",
    "linting",
    "testing",
    "file-management",
    "build-tools",
    "ai-development"
]

[project.optional-dependencies]
dev = [
    "black>=25.1.0",
    "pytest>=8.4.1",
    "ruff>=0.12.1",
]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.ruff]
line-length = 120
target-version = "py312"

[tool.ruff.lint]
select = ["E", "F", "W", "I", "N", "UP", "S", "B", "A", "C4", "T20"]
ignore = ["S101"]  # Allow assert statements

[tool.black]
line-length = 120
target-version = ['py312']

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = "test_*.py"
python_classes = "Test*"
python_functions = "test_*"

[dependency-groups]
dev = [
    "black>=25.1.0",
    "pytest-asyncio>=1.0.0",
    "ruff>=0.12.1",
]

[tool.aromcp]
# Tool categories for AI agent discovery
categories = [
    "code_exploration",
    "code_quality",
    "code_modification",
    "dependency_analysis",
    "build_and_test",
    "documentation",
    "standards_management"
]

[tool.aromcp.primary_tools]
# Simplified tools recommended for AI agents
file_operations = ["list_files", "read_files", "write_files"]
code_analysis = ["find_who_imports", "find_dead_code", "find_import_cycles"]
quality_checks = ["lint_project", "check_typescript", "run_tests", "quality_check"]
build_tools = ["execute_command", "detect_build_tools", "check_dependencies"]
documentation = ["extract_api_endpoints", "load_project_documents"]
standards = ["hints_for_file", "register_standard", "add_rule"]

[tool.aromcp.workflows]
# Common workflows for AI agents
pre_commit = ["lint_project", "check_typescript", "run_tests"]
explore_project = ["list_files", "read_files", "detect_build_tools"]
refactor_safe = ["find_who_imports", "read_files", "write_files", "lint_project"]
cleanup_code = ["find_dead_code", "find_import_cycles", "check_dependencies"]
