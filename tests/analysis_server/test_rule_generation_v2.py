"""
Tests for V2 rule generation helper tools.
"""

import json
import os
import tempfile
import pytest
from pathlib import Path

from aromcp.analysis_server.tools.write_generated_rule import write_generated_rule_impl
from aromcp.analysis_server.tools.update_rule_manifest import update_rule_manifest_impl
from aromcp.analysis_server.tools.write_ai_context_section import write_ai_context_section_impl


class TestWriteGeneratedRule:
    """Test cases for write_generated_rule tool."""

    def test_basic_functionality(self):
        """Test basic rule writing functionality."""
        with tempfile.TemporaryDirectory() as temp_dir:
            rule_content = """module.exports = {
    meta: {
        type: 'problem',
        docs: {
            description: 'Test rule',
            category: 'Best Practices'
        },
        schema: []
    },
    create(context) {
        return {
            // Rule implementation
        };
    }
};"""
            
            result = write_generated_rule_impl(
                rule_content=rule_content,
                rule_id="test-rule",
                project_root=temp_dir
            )
            
            assert "data" in result
            assert result["data"]["rule_id"] == "test-rule"
            assert result["data"]["success"] is True
            
            # Check file was written
            rule_file = os.path.join(temp_dir, ".aromcp", "generated-rules", "rules", "test-rule.js")
            assert os.path.exists(rule_file)
            
            # Check content includes header
            with open(rule_file, 'r', encoding='utf-8') as f:
                content = f.read()
                
            assert "ESLint Rule: test-rule" in content
            assert "Generated by AroMCP" in content
            assert rule_content in content

    def test_invalid_rule_id(self):
        """Test validation of rule ID format."""
        with tempfile.TemporaryDirectory() as temp_dir:
            invalid_ids = [
                "",
                "Invalid_Rule",
                "rule with spaces",
                "rule@special",
                "UPPERCASE-RULE"
            ]
            
            for invalid_id in invalid_ids:
                result = write_generated_rule_impl(
                    rule_content="test content",
                    rule_id=invalid_id,
                    project_root=temp_dir
                )
                
                assert "error" in result
                assert result["error"]["code"] == "INVALID_INPUT"

    def test_empty_rule_content(self):
        """Test validation of empty rule content."""
        with tempfile.TemporaryDirectory() as temp_dir:
            result = write_generated_rule_impl(
                rule_content="",
                rule_id="test-rule",
                project_root=temp_dir
            )
            
            assert "error" in result
            assert result["error"]["code"] == "INVALID_INPUT"
            assert "empty" in result["error"]["message"].lower()

    def test_directory_creation(self):
        """Test automatic creation of output directories."""
        with tempfile.TemporaryDirectory() as temp_dir:
            # Custom output directory that doesn't exist
            result = write_generated_rule_impl(
                rule_content="test content",
                rule_id="test-rule",
                output_dir=".aromcp/custom-rules",
                project_root=temp_dir
            )
            
            assert "data" in result
            
            # Verify directory was created
            rules_dir = os.path.join(temp_dir, ".aromcp", "custom-rules", "rules")
            assert os.path.exists(rules_dir)
            assert os.path.isdir(rules_dir)


class TestUpdateRuleManifest:
    """Test cases for update_rule_manifest tool."""

    def test_create_new_manifest(self):
        """Test creation of new manifest file."""
        with tempfile.TemporaryDirectory() as temp_dir:
            metadata = {
                "source_standard": ".aromcp/standards/test.md",
                "severity": "error",
                "patterns": ["**/*.js"],
                "type": "eslint_rule"
            }
            
            result = update_rule_manifest_impl(
                rule_id="test-rule",
                metadata=metadata,
                project_root=temp_dir
            )
            
            assert "data" in result
            assert result["data"]["rule_id"] == "test-rule"
            assert result["data"]["total_rules"] == 1
            
            # Check manifest file was created
            manifest_file = os.path.join(temp_dir, ".aromcp", "generated-rules", "manifest.json")
            assert os.path.exists(manifest_file)
            
            # Check manifest content
            with open(manifest_file, 'r', encoding='utf-8') as f:
                manifest = json.load(f)
                
            assert manifest["version"] == "1.0"
            assert "test-rule" in manifest["rules"]
            
            rule_entry = manifest["rules"]["test-rule"]
            assert rule_entry["source_standard"] == metadata["source_standard"]
            assert rule_entry["severity"] == metadata["severity"]
            assert rule_entry["patterns"] == metadata["patterns"]
            assert rule_entry["type"] == metadata["type"]
            assert "updated" in rule_entry

    def test_update_existing_manifest(self):
        """Test updating existing manifest with new rule."""
        with tempfile.TemporaryDirectory() as temp_dir:
            manifest_dir = os.path.join(temp_dir, ".aromcp", "generated-rules")
            os.makedirs(manifest_dir, exist_ok=True)
            
            # Create existing manifest
            existing_manifest = {
                "version": "1.0",
                "generated": "2024-01-01T00:00:00",
                "rules": {
                    "existing-rule": {
                        "updated": "2024-01-01T00:00:00",
                        "type": "eslint_rule"
                    }
                },
                "statistics": {
                    "total_standards": 1,
                    "eslint_rules_generated": 1,
                    "ai_context_sections": 0,
                    "hybrid_implementations": 0
                }
            }
            
            manifest_file = os.path.join(manifest_dir, "manifest.json")
            with open(manifest_file, 'w', encoding='utf-8') as f:
                json.dump(existing_manifest, f)
                
            # Add new rule
            result = update_rule_manifest_impl(
                rule_id="new-rule",
                metadata={"type": "ai_context"},
                project_root=temp_dir
            )
            
            assert "data" in result
            assert result["data"]["total_rules"] == 2
            
            # Check updated manifest
            with open(manifest_file, 'r', encoding='utf-8') as f:
                manifest = json.load(f)
                
            assert len(manifest["rules"]) == 2
            assert "existing-rule" in manifest["rules"]
            assert "new-rule" in manifest["rules"]
            
            # Check statistics were updated
            stats = manifest["statistics"]
            assert stats["total_standards"] == 2
            assert stats["eslint_rules_generated"] == 1
            assert stats["ai_context_sections"] == 1

    def test_invalid_inputs(self):
        """Test validation of invalid inputs."""
        with tempfile.TemporaryDirectory() as temp_dir:
            # Empty rule ID
            result = update_rule_manifest_impl(
                rule_id="",
                metadata={"type": "eslint_rule"},
                project_root=temp_dir
            )
            assert "error" in result
            assert result["error"]["code"] == "INVALID_INPUT"
            
            # Invalid metadata type
            result = update_rule_manifest_impl(
                rule_id="test-rule",
                metadata="not a dict",
                project_root=temp_dir
            )
            assert "error" in result
            assert result["error"]["code"] == "INVALID_INPUT"

    def test_statistics_calculation(self):
        """Test automatic statistics calculation."""
        with tempfile.TemporaryDirectory() as temp_dir:
            # Add different types of rules
            rules = [
                ("eslint-1", {"type": "eslint_rule"}),
                ("eslint-2", {"type": "eslint_rule"}),
                ("ai-1", {"type": "ai_context"}),
                ("hybrid-1", {"type": "hybrid"})
            ]
            
            for rule_id, metadata in rules:
                update_rule_manifest_impl(
                    rule_id=rule_id,
                    metadata=metadata,
                    project_root=temp_dir
                )
                
            # Check final statistics
            manifest_file = os.path.join(temp_dir, ".aromcp", "generated-rules", "manifest.json")
            with open(manifest_file, 'r', encoding='utf-8') as f:
                manifest = json.load(f)
                
            stats = manifest["statistics"]
            assert stats["total_standards"] == 4
            assert stats["eslint_rules_generated"] == 2
            assert stats["ai_context_sections"] == 1
            assert stats["hybrid_implementations"] == 1


class TestWriteAIContextSection:
    """Test cases for write_ai_context_section tool."""

    def test_create_new_context_file(self):
        """Test creation of new AI context file."""
        with tempfile.TemporaryDirectory() as temp_dir:
            context_content = """This standard requires human judgment to evaluate architectural decisions.

Key considerations:
- Component boundaries and responsibilities
- Data flow patterns
- Performance implications"""
            
            result = write_ai_context_section_impl(
                context_content=context_content,
                section_id="component-isolation",
                section_title="Component Isolation",
                project_root=temp_dir
            )
            
            assert "data" in result
            assert result["data"]["section_id"] == "component-isolation"
            assert result["data"]["action"] == "created"
            
            # Check file was created
            context_file = os.path.join(temp_dir, ".aromcp", "generated-rules", "ai-context.md")
            assert os.path.exists(context_file)
            
            # Check content
            with open(context_file, 'r', encoding='utf-8') as f:
                content = f.read()
                
            assert "# AI Context for Code Standards" in content
            assert "## Component Isolation" in content
            assert context_content in content
            assert "<!-- aromcp:section:start:component-isolation -->" in content
            assert "<!-- aromcp:section:end:component-isolation -->" in content

    def test_update_existing_section(self):
        """Test updating existing section in context file."""
        with tempfile.TemporaryDirectory() as temp_dir:
            context_dir = os.path.join(temp_dir, ".aromcp", "generated-rules")
            os.makedirs(context_dir, exist_ok=True)
            
            # Create existing context file
            existing_content = """# AI Context for Code Standards

<!-- aromcp:section:start:component-isolation -->
## Component Isolation

Old content that should be replaced.

<!-- aromcp:section:end:component-isolation -->

<!-- aromcp:section:start:other-section -->
## Other Section

This should remain unchanged.

<!-- aromcp:section:end:other-section -->
"""
            
            context_file = os.path.join(context_dir, "ai-context.md")
            with open(context_file, 'w', encoding='utf-8') as f:
                f.write(existing_content)
                
            # Update the section
            new_content = "Updated content for component isolation."
            
            result = write_ai_context_section_impl(
                context_content=new_content,
                section_id="component-isolation",
                section_title="Component Isolation",
                project_root=temp_dir
            )
            
            assert "data" in result
            assert result["data"]["action"] == "updated"
            
            # Check updated content
            with open(context_file, 'r', encoding='utf-8') as f:
                content = f.read()
                
            assert new_content in content
            assert "Old content that should be replaced" not in content
            assert "This should remain unchanged" in content  # Other section preserved

    def test_add_new_section_to_existing_file(self):
        """Test adding new section to existing context file."""
        with tempfile.TemporaryDirectory() as temp_dir:
            context_dir = os.path.join(temp_dir, ".aromcp", "generated-rules")
            os.makedirs(context_dir, exist_ok=True)
            
            # Create existing context file
            existing_content = """# AI Context for Code Standards

<!-- aromcp:section:start:existing-section -->
## Existing Section

Existing content.

<!-- aromcp:section:end:existing-section -->
"""
            
            context_file = os.path.join(context_dir, "ai-context.md")
            with open(context_file, 'w', encoding='utf-8') as f:
                f.write(existing_content)
                
            # Add new section
            result = write_ai_context_section_impl(
                context_content="New section content.",
                section_id="new-section",
                section_title="New Section",
                project_root=temp_dir
            )
            
            assert "data" in result
            assert result["data"]["action"] == "created"
            
            # Check both sections exist
            with open(context_file, 'r', encoding='utf-8') as f:
                content = f.read()
                
            assert "## Existing Section" in content
            assert "## New Section" in content
            assert "Existing content" in content
            assert "New section content" in content

    def test_invalid_inputs(self):
        """Test validation of invalid inputs."""
        with tempfile.TemporaryDirectory() as temp_dir:
            # Empty content
            result = write_ai_context_section_impl(
                context_content="",
                section_id="test-section",
                section_title="Test Section",
                project_root=temp_dir
            )
            assert "error" in result
            assert result["error"]["code"] == "INVALID_INPUT"
            
            # Invalid section ID
            result = write_ai_context_section_impl(
                context_content="test content",
                section_id="Invalid Section ID",
                section_title="Test Section",
                project_root=temp_dir
            )
            assert "error" in result
            assert result["error"]["code"] == "INVALID_INPUT"
            
            # Empty title
            result = write_ai_context_section_impl(
                context_content="test content",
                section_id="test-section",
                section_title="",
                project_root=temp_dir
            )
            assert "error" in result
            assert result["error"]["code"] == "INVALID_INPUT"

    def test_section_id_validation(self):
        """Test section ID format validation."""
        with tempfile.TemporaryDirectory() as temp_dir:
            valid_ids = ["test-section", "component-isolation", "api-design-1"]
            invalid_ids = ["Test Section", "section_with_underscores", "section@special", ""]
            
            for valid_id in valid_ids:
                result = write_ai_context_section_impl(
                    context_content="test content",
                    section_id=valid_id,
                    section_title="Test Section",
                    project_root=temp_dir
                )
                assert "data" in result, f"Valid ID {valid_id} should succeed"
                
            for invalid_id in invalid_ids:
                result = write_ai_context_section_impl(
                    context_content="test content",
                    section_id=invalid_id,
                    section_title="Test Section",
                    project_root=temp_dir
                )
                assert "error" in result, f"Invalid ID {invalid_id} should fail"

    def test_section_markers_uniqueness(self):
        """Test that section markers are unique and don't interfere."""
        with tempfile.TemporaryDirectory() as temp_dir:
            # Add multiple sections with similar names
            sections = [
                ("component", "Component Standards"),
                ("component-isolation", "Component Isolation"),
                ("component-naming", "Component Naming")
            ]
            
            for section_id, section_title in sections:
                write_ai_context_section_impl(
                    context_content=f"Content for {section_id}",
                    section_id=section_id,
                    section_title=section_title,
                    project_root=temp_dir
                )
                
            # Verify all sections exist independently
            context_file = os.path.join(temp_dir, ".aromcp", "generated-rules", "ai-context.md")
            with open(context_file, 'r', encoding='utf-8') as f:
                content = f.read()
                
            for section_id, section_title in sections:
                assert f"<!-- aromcp:section:start:{section_id} -->" in content
                assert f"<!-- aromcp:section:end:{section_id} -->" in content
                assert f"## {section_title}" in content
                assert f"Content for {section_id}" in content